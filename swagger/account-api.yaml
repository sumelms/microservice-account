openapi: 3.0.1
info:
  title: Sumé User API
  description: User authentication API ...
  termsOfService: 'https://www.sumelms.com/terms/'
  contact:
    email: hi@sumelms.io
  license:
    name: Apache 2.0
    url: 'https://github.com/sumelms/frontend/blob/main/LICENSE'
  version: 1.0.0
externalDocs:
  description: Find out more about Sumé
  url: 'https://www.sumelms.com/'
servers:
  - url: 'http://localhost:8000/'
    description: Mock server
tags:
  - name: user
    description: Everything about user
    externalDocs:
      description: Find out more
      url: 'https://github.com/sumelms/microservice-account'
paths:
  /users:
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: List all users into the system
      operationId: listUsers
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Invalid username/password supplied
          content: {}
    post:
      tags:
        - user
      summary: Create user
      description: Create a new account.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid User
          content: {}
      x-codegen-request-body-name: body
  '/users/{userId}':
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Get user by user id
      operationId: getUserByID
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        activatedAt:
          type: string
          format: date-time
    Profile:
      type: object
      properties:
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT